-- spec script. should NOT be bundled with final game.
-- for lib/priorityqueue.lua
--
PriorityQueue = require( 'priorityqueue' )

describe( "PriorityQueue library", function()
    describe( "new()", function()
        it( "creates a new default queue correctly", function()
            local q = PriorityQueue:new()
            assert.is.same( {}, q.values )
            assert.is.same( {}, q.priorities )
            assert.is.same( q.defaultCompare, q.compare )
        end)
        it( "creates a new queue with specified comparator correctly", function()
            local comparator = function( a, b ) end
            local q = PriorityQueue:new( comparator )
            assert.is.same( {}, q.values )
            assert.is.same( {}, q.priorities )
            assert.is.same( comparator, q.compare )
        end)
        it( "creates a new queue with input tables correctly", function()
            local values = { 'foo', 'bar', 'baz' }
            local priorities = { 5, 12, 2 }
            local q = PriorityQueue:new( nil, values, priorities )
            assert.is.same( { 'baz', 'foo', 'bar' }, q.values )
            assert.is.same( { 12, 5, 2 }, q.priorities )
            assert.is.same( q.compare, q.defaultCompare )
        end)
    end)
    describe( "push()", function()
        it( "adds an item to the queue correctly", function()
            local q = PriorityQueue:new()
            q:push( 'foof', 4 )
            local result = q.values[ 1 ]
            local expected = 'foof'
            assert.is.same( expected, result )
        end)
        it( "adds multiple items to the queue correctly", function()
            local q = PriorityQueue:new()
            q:push( 'foo', 3 )
            q:push( 'bar', 6 )
            q:push( 'baz', 4 )
            q:push( 'qux', 9 )
            q:push( 'quz', 2 )
            local result = q.values[ 1 ]
            local expected = 'qux'
            assert.is.same( expected, result )
            result = q.values[ 2 ]
            expected = 'bar'
            assert.is.same( expected, result )
        end)
    end)
    describe( "pop()", function()
        it( "retrieves a single item from the queue correctly", function()
            local q = PriorityQueue:new()
            q:push( 'foof', 4 )
            local result = q:pop()
            local expected = 'foof'
            assert.is.same( expected, result )
        end)
        it( "retrieves multiple items from the queue correctly", function()
            local q = PriorityQueue:new()
            q:push( 'foo', 3 )
            q:push( 'bar', 6 )
            q:push( 'baz', 4 )
            q:push( 'qux', 9 )
            q:push( 'quz', 2 )
            local result = q:pop()
            local expected = 'qux'
            assert.is.same( expected, result )
            result = q:pop()
            expected = 'bar'
            assert.is.same( expected, result )
        end)
    end)
    describe( "clone()", function()
        it( "creates a new clone of an empty queue correctly", function()
            local q = PriorityQueue:new()
            local c = q:clone()
            assert.is.same( {}, c.values )
            assert.is.same( {}, c.priorities )
            assert.is.same( c.defaultCompare, c.compare )
        end)
        it( "creates a new clone with specified comparator correctly", function()
            local comparator = function( a, b ) end
            local q = PriorityQueue:new( comparator )
            local c = q:clone()
            assert.is.same( {}, c.values )
            assert.is.same( {}, c.priorities )
            assert.is.same( comparator, c.compare )
        end)
    end)
    describe( "size()", function()
        it( "return zero for empty queue", function()
            local q = PriorityQueue:new()
            local result = q:size()
            local expected = 0
            assert.is.same( expected, result )
        end)
        it( "returns the correct value after pushing items", function()
            local q = PriorityQueue:new()
            q:push( 'foo', 1 )
            q:push( 'bar', 3 )
            q:push( 'baz', 1 )
            local result = q:size()
            local expected = 3
            assert.is.same( expected, result )
        end)
        it( "returns the correct value after pushing and popping items", function()
            local q = PriorityQueue:new()
            q:push( 'foo', 2 )
            q:push( 'bar', 3 )
            q:push( 'baz', 9 )
            q:pop()
            q:push( 'qux', 1 )
            q:pop()
            local result = q:size()
            local expected = 2
            assert.is.same( expected, result )
        end)
    end)
    describe( "isEmpty()", function()
        it( "return true for empty queue", function()
            local q = PriorityQueue:new()
            local result = q:isEmpty()
            local expected = true
            assert.is.same( expected, result )
        end)
        it( "returns false after pushing items", function()
            local q = PriorityQueue:new()
            q:push( 'foo', 1 )
            q:push( 'bar', 3 )
            q:push( 'baz', 1 )
            local result = q:isEmpty()
            local expected = false
            assert.is.same( expected, result )
        end)
    end)
    describe( "peek()", function()
        it( "retrieves a single item from the queue correctly", function()
            local q = PriorityQueue:new()
            q:push( 'foof', 4 )
            local result = q:peek()
            local expected = 'foof'
            assert.is.same( expected, result )
            assert.is.same( q:size(), 1 )
        end)
        it( "returns nil if the queue is empty", function()
            local q = PriorityQueue:new()
            local result = q:peek()
            local expected = nil
            assert.is.same( expected, result )
            assert.is.same( q:size(), 0 )
        end)
    end)
    describe( "getTables()", function()
        it( "return nils for empty queue", function()
            local q = PriorityQueue:new()
            local result_v, result_p = q:getTables()
            local expected_v = nil
            local expected_p = nil
            assert.is.same( expected_v, result_v )
            assert.is.same( expected_p, result_p )
        end)
        it( "return correct tables for filled queue", function()
            local q = PriorityQueue:new()
            q:push( 'foo', 2 )
            q:push( 'bar', 3 )
            q:push( 'baz', 9 )
            q:push( 'qux', 1 )
            q:pop()
            local result_v, result_p = q:getTables()
            local expected_v = { 'bar', 'foo', 'qux' }
            local expected_p = { 3, 2, 1 }
            assert.is.same( expected_v, result_v )
            assert.is.same( expected_p, result_p )
        end)
    end)
    describe( "clear()", function()
        it( "clears an empty queue correctly", function()
            local q = PriorityQueue:new()
            local result = q:size()
            q:clear()
            local expected = 0
            assert.is.same( expected, result )
        end)
        it( "adds multiple items to the queue correctly", function()
            local q = PriorityQueue:new()
            q:push( 'foo', 3 )
            q:push( 'bar', 6 )
            q:push( 'baz', 4 )
            q:push( 'qux', 9 )
            q:push( 'quz', 2 )
            q:clear()
            local result = q:size()
            local expected = 0
            assert.is.same( expected, result )
        end)
    end)
end)
