-- spec script. should NOT be bundled with final game.
-- for lib/list.lua
--
List = require( 'list' )

describe( "List library", function()
    describe( "new()", function()
        it( "sets first and last correctly when no start values specified", function()
            local q = List:new()
            local expected = { 0, -1 }
            local result = { q.first, q.last }
            assert.is.same( expected, result )
        end)
        it( "can be initialized with a set of starting items", function()
            local q = List:new( 'foo', 'bar', 3, 'baz' )
            local expected = 'bar'
            q:shift()
            local result = q:shift()
            assert.is.same( expected, result )
        end)
    end)
    describe( "push()", function()
        it( "takes an integer correctly", function()
            local q = List:new()
            local expected = 12
            q:push( 12 )
            local result = q[ q.last ]
            assert.is.same( expected, result )
        end)
        it( "takes a table correctly", function()
            local q = List:new()
            local input = { foo = 'bar', [9] = 'ok' }
            local expected = { foo = 'bar', [9] = 'ok' }
            q:push( input )
            local result = q[ q.last ]
            assert.is.same( expected, result )
        end)
    end)
    describe( "pop()", function()
        it( "pops entries correctly", function()
            local q = List:new()
            local expected = 12
            q:push( 12 )
            q:push( 'asd' )
            q:push( 43 )
            q:push( 7 )
            q:pop()
            q:pop()
            q:pop()
            local result = q:pop()
            assert.is.same( expected, result )
        end)
    end)
    describe( "shift()", function()
        it( "shifts entries correctly", function()
            local q = List:new()
            local expected = 12
            q:push( 12 )
            q:push( 'asd' )
            q:push( 43 )
            q:push( 7 )
            local result = q:shift()
            assert.is.same( expected, result )
        end)
    end)
    describe( "unshift()", function()
        it( "shifts entries correctly", function()
            local q = List:new()
            local expected = 'asd'
            q:push( 12 )
            q:unshift( 'asd' )
            local result = q:shift()
            assert.is.same( expected, result )
        end)
    end)
    describe( "length()", function()
        it( "counts an empty list correctly", function()
            local q = List:new()
            local result = q:length()
            local expected = 0
            assert.is.same( expected, result )
        end)
        it( "counts a short list correctly", function()
            local q = List:new()
            q:push( 'foo' )
            q:push( 'bar' )
            q:push( 'baz' )
            local result = q:length()
            local expected = 3
            assert.is.same( expected, result )
        end)
        it( "counts a modified list correctly", function()
            local q = List:new()
            for i = 1, 20 do
                q:push( 'foo' )
            end
            for i = 1,3 do
                q:shift()
                q:pop()
            end
            q:push( 'bar' )
            local result = q:length()
            local expected = 15
            assert.is.same( expected, result )
        end)
    end)
    describe( "isEmpty()", function()
        it( "counts an empty list correctly", function()
            local q = List:new()
            local result = q:isEmpty()
            local expected = true
            assert.is.same( expected, result )
        end)
        it( "counts a short list correctly", function()
            local q = List:new()
            q:push( 'foo' )
            q:push( 'bar' )
            q:push( 'baz' )
            local result = q:isEmpty()
            local expected = false
            assert.is.same( expected, result )
        end)
        it( "counts a modified list correctly", function()
            local q = List:new()
            q:push( 'foo' )
            q:push( 'bar' )
            q:pop()
            q:pop()
            local result = q:isEmpty()
            local expected = true
            assert.is.same( expected, result )
        end)
    end)
end)
